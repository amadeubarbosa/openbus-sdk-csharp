#ifndef ACS_IDL
#define ACS_IDL

#include "core.idl"
#include "scs.idl"
#include "access_control_service_exceptions.idl"
#include "registry_service.idl"

module openbusidl {

/**
 * \brief Módulo do Serviço de Controle de Acesso.
 */
module acs {

/** \brief Representa o identificador de uma credencial. */
typedef Identifier CredentialIdentifier;

/** \brief Representa uma sequência de identificadores de credenciais. */
typedef sequence<CredentialIdentifier> CredentialIdentifierList;

/** \brief Representa o identificador de um observador de credencial. */
typedef Identifier CredentialObserverIdentifier;

/**
 * \brief Representa a credencial de um membro.
 */
struct Credential {
  CredentialIdentifier identifier; /**< \brief Identificador único. */
  string owner; /**< \brief Nome da entidade dona. */
  string delegate; /**< \brief Nome da entidade delegada (opcional). */
};

/**
 * \brief Representa um observador de credenciais. Esse observador será
 * notificado quando acontecerem alterações nas credenciais que ele observa.
 */
interface ICredentialObserver {
    /**
     * \brief Notifica que uma credencial foi removida.
     *
     * \param aCredential A credencial que foi removida.
     */
    void credentialWasDeleted(in Credential aCredential);
};

/** \brief Representa a validade de uma credencial (s). */
typedef long Lease;

interface ILeaseProvider {
    /**
     * \brief Renova o lease de uma credencial.
     *
     * \param[in] aCredential A credencial da entidade.
     * \param[out] aLease O lease obtido.
     *
     * \return \c true, caso o \c lease seja renovado, ou \c false, caso
     * contrário.
     */
     boolean renewLease (in Credential aCredential, out Lease aLease);
};

/**
 * \brief Representa o serviço de controle de acesso.
 */
interface IAccessControlService {
    /**
     * \brief Autentica uma entidade através de um nome e uma senha.
     *
     * \param[in] name O nome.
     * \param[in] password A senha.
     * \param[out] aCredential Uma credencial para a entidade.
     * \param[out] aLease Um lease que define a validade da credencial.
     *
     * \return \c true, caso o login seja realizado com sucesso, ou \c false,
     * caso contrário.
     */
    boolean loginByPassword (in string name, in string password,
      out Credential aCredential, out Lease aLease);
    /**
     * \brief Autentica uma entidade através de um nome e de uma resposta para um desafio
     * previamente obtido.
     *
     * \param[in] name O nome.
     * \param[in] answer A reposta para o desafio.
     * \param[out] aCredential Uma credencial para a entidade.
     * \param[out] aLease Um lease que define a validade da credencial.
     *
     * \return \c true, caso o login seja realizado com sucesso, ou \c false,
     * caso contrário.
     *
     * \see getChallenge
     */
    boolean loginByCertificate (in string name, in OctetSeq answer,
      out Credential aCredential, out Lease aLease);
    /**
     * \brief Obtém um desafio para uma entidade.
     *
     * \param name O nome da entidade.
     *
     * \return O desafio.
     *
     * \see loginByCertificate
     */
    OctetSeq getChallenge(in string name);
    /**
     * \brief Efetua o \c logout de uma entidade.
     *
     * \param aCredential A credencial da entidade.
     *
     * \return \c true, caso o \c logout seja realizado, ou \c false, caso
     * contrário.
     */
    boolean logout (in Credential aCredential);
    /**
     * \brief Verifica se uma determinada credencial está válida.
     *
     * \param aCredential A credencial.
     *
     * \return \c true, caso a credencial esteja válida, ou \c false, caso
     * contrário.
     */
    boolean isValid (in Credential aCredential);

    /**
     * \brief Adiciona um observador de credenciais. Esse observador será notificado apenas sobre
     * eventos ocorridos numa sequência de credenciais.
     *
     * \param observer O observador.
     * \param someCredentialIdentifiers A sequência de credenciais.
     *
     * \return Um identificador para o observador.
     */
    CredentialObserverIdentifier addObserver(in ICredentialObserver observer, in CredentialIdentifierList someCredentialIdentifiers);
    /**
     * \brief Remove um observador de credenciais.
     *
     * \param identifier O identificador do observador.
     *
     * \return \c true caso o observador tenha sido removido, ou \c false, caso contrário.
     */
    boolean removeObserver(in CredentialObserverIdentifier identifier);
    /**
     * \brief Adiciona uma credencial à sequência de credenciais nas quais um determinado
     * observador está interessado.
     *
     * \param observerIdentifier O identificador do observador.
     * \param aCredentialIdentifier O identificador da credencial.
     *
     * \return \c true caso a credencial tenha sido adicionada à sequência de credenciais do
     * observador, ou \c false, caso contrário.
     */
    boolean addCredentialToObserver(in CredentialObserverIdentifier observerIdentifier, in CredentialIdentifier aCredentialIdentifier);
    /**
     * \brief Remove uma credencial da sequência de credenciais nas quais um determinado
     * observador está interessado.
     *
     * \param observerIdentifier O identificador do observador.
     * \param aCredentialIdentifier O identificador da credencial.
     *
     * \return \c true caso a credencial tenha sido removida da sequência de credenciais do
     * observador, ou \c false, caso contrário.
     */
    boolean removeCredentialFromObserver(in CredentialObserverIdentifier observerIdentifier, in CredentialIdentifier aCredentialIdentifier);
};


/*--------------------------------- Sistema -------------------------------*/

/** 
 * \brief Representa os sistema que fazem parte do barramento.
 *   Este elemento é de caráter gerencial, as implantações do sistemas
 *   que realmente interagem com o barramento.
 *
 * \see SystemDeployment
 */
struct System {
  string id;  /**< \brief Identificar único, no estilo login UNIX */
  string description; /**< /brief Descrição do sistema */
};

/** \brief Seqüência de sistemas */
typedef sequence<System> SystemList;

/*------------------------------ Implantação ------------------------------*/

/**
 * \brief Representa a implantação de um sistema.
 *   São as implantações que interagem com o barramento, exportando e
 *   consumindo serviços.
 */
struct SystemDeployment {
  string id;       /**< \brief Identificar único, no estilo login UNIX. */
  string systemId; /**< \brief Identificador do sistema a que esta implantação
                         está relacionada. */
  string description; /**< \brief Descrição da implantação. */
};

/** \brief Seqüência de implantações. */
typedef sequence<SystemDeployment> SystemDeploymentList;

/** \brief Certificado que a implantação utiliza na autenticação. */
typedef sequence<octet> SystemDeploymentCertificate;

/**
 * \brief Interface de gerenciamento de sistemas e implatações.
 */
interface IManagement {

  /** 
   * \brief Cadastra um novo sistema.
   *  
   * \param id Identificador único do sistema.
   * \param description Descrição do sistema.
   *
   * \exception SystemAlreadyExists Um sistema com o mesmo identificador
   * já está cadastrado.
   */
  void addSystem(in string id, in string description)
    raises (SystemAlreadyExists);

  /** 
   * \brief Remove o sistema do barramento.
   * Um sistema só poderá ser removido se não possuir nenhuma
   * implantação cadastrada que o referencia.
   *
   * \param id Identificador do sistema.
   *
   * \exception SystemInUse O sistema possui alguma implantação cadastrada.
   * \exception SystemNonExistent Sistema não cadastrado.
   */
  void removeSystem(in string id) raises (SystemInUse, SystemNonExistent);

  /**
   * \brief Atualiza a descrição do sistema.
   *
   * \param id Identificador do sistema.
   * \param description Nova descrição para o sistema.
   *
   * \exception SystemNonExistent Sistema não cadastrado.
   */
  void setSystemDescription(in string id, in string description)
    raises (SystemNonExistent);

  /** 
   * \brief Recupera todos os sistemas cadastrados.
   *
   * \return Uma seqüência de sistemas.
   */
  SystemList getSystems();

  /** 
   * \brief Recupera um sistema dado o seu identificador.
   *
   * \param id Identificador do sistema.
   *
   * \return Sistema referente ao identificador.
   * \exception SystemNonExistent Sistema não cadastrado.
   */
  System getSystemById(in string id) raises (SystemNonExistent);

  /*---------------------------- Implantações -------------------------------*/

  /**
   * \brief Cadastra uma nova implantação para um sistema.
   *
   * \param id Identificador único da implantação (estilo login UNIX).
   * \param systeId Identificador do sistema a que esta implantação pertence.
   * \param description Descrição da implantação.
   *
   * \exception SystemDeploymentAlreadyExists Existe outra implantação com
   *   o identificador fornecido.
   * \exception SystemNonExistent Sistema não cadastrado.
   * \exception InvalidCertificate Certificado inválido.
   */
  void addSystemDeployment(in string id, in string systemId,
    in string description, in SystemDeploymentCertificate certificate)
    raises (SystemDeploymentAlreadyExists, SystemNonExistent, InvalidCertificate);

  /**
   * \brief Remove uma implantação de sistema.
   *
   * \param id Identificador da implantação.
   *
   * \exception SystemDeploymentNonExistent Implantação não cadastrada.
   */
  void removeSystemDeployment(in string id)
    raises (SystemDeploymentNonExistent);

  /**
   * \brief Altera a descrição da implantação.
   *
   * \param id Identificador da implantação.
   * \param description Nova descrição da implantação.
   *
   * \exception SystemDeploymentNonExistent Implantação não cadastrada.
   */
  void setSystemDeploymentDescription(in string id, in string description)
    raises (SystemDeploymentNonExistent);

  /**
   * \brief Recupera o certificado da implantação.
   *
   * \param id Identificador da implantação.
   *
   * \return Certificado da implantação.
   *
   * \exception SystemDeploymentNonExistent Implantação não cadastrada.
   * \exception SystemCertificateNonExistent Implantação não possui certificado.
   */
  SystemDeploymentCertificate getSystemDeploymentCertificate(in string id)
    raises (SystemDeploymentNonExistent, CertificateNonExistent);

  /**
   * \brief Altera o certificado da implantação.
   *
   * \param id Identificador da implantação.
   * \param certificate Novo certificado da implantação.
   *
   * \exception SystemDeploymentNonExistent Implantação não cadastrada.
   * \exception InvalidSystemCertificate Certificado inválido.
   */
  void setSystemDeploymentCertificate(in string id,
    in SystemDeploymentCertificate certificate)
    raises (SystemDeploymentNonExistent, InvalidCertificate);

  /**
   * \brief Recupera todas implantações cadastradas.
   *
   * \return Uma seqüência com as implantações cadastradas. 
   */
  SystemDeploymentList getSystemDeployments();

  /**
   * \brief Recupera a implantação dado o seu identificador.
   *
   * \return Retorna a implantação referente ao identificador.
   *
   * \exception SystemDeploymentNonExistent Implantação não cadastrada.
   */
  SystemDeployment getSystemDeployment(in string id)
    raises (SystemDeploymentNonExistent);

  /**
   * \brief Recupera todas as implantações de um dado sistema.
   *
   * \param systemId Identificador do sistema 
   *
   * \return Seqüência com as implantações referentes ao sistema informado.
   *
   * \exception SystemNonExistent Sistema informado não está cadastrado.
   */
  SystemDeploymentList getSystemDeploymentsBySystemId(in string systemId);
};

};

};

#endif
