#ifndef RS_IDL
#define RS_IDL

#include "core.idl"
#include "scs.idl"
#include "access_control_service_exceptions.idl"

module openbusidl {

/**
 * \brief Módulo do Serviço de Registro.
 */
module rs {

typedef sequence<string> PropertyValue;

/**
 * \brief Representa uma propriedade.
 */
struct Property {
    string name;
    PropertyValue value;
};
typedef sequence<Property> PropertyList;

/**
 * \brief Representa uma oferta de serviço.
 */
struct ServiceOffer {
    PropertyList properties; /**< \brief Propriedades. */
    scs::core::IComponent member; /**< \brief O membro que está ofertando o serviço. */
};
typedef sequence<ServiceOffer> ServiceOfferList;

/** \brief O identificador do registro de um serviço. */
typedef Identifier RegistryIdentifier;

/**
 * \brief Representa uma faceta.
 */
typedef string Facet;
typedef sequence<Facet> FacetList;

/**
 * \brief Representa o serviço de registro.
 */
interface IRegistryService {
    /**
     * \brief Registra uma oferta de serviço.
     *
     * \param aServiceOffer A oferta de serviço.
     * \param[out] identifier Um identificador para o registro.
     *
     * \return \c true, caso a oferta de serviço tenha sido registrada, ou
     * \c false, caso contrário.
     */
    boolean register(in ServiceOffer aServiceOffer, out RegistryIdentifier identifier);

    /**
     * \brief Remove uma oferta de serviço.
     *
     * \param identifier O identificador do registro da oferta do serviço.
     *
     * \return \c true, caso a oferta de serviço seja removida, ou \c false,
     * caso contrário.
     */
    boolean unregister(in RegistryIdentifier identifier);

    /**
     * \brief Atualiza uma oferta de serviço.
     *
     * \param identifier O identificador do registro da oferta do serviço.
     * \param newProperties O novo conjunto de propriedades associado à oferta
     *
     * \return \c true, caso a oferta de serviço seja atualizada, ou \c false,
     * caso contrário.
     */
    boolean update(in RegistryIdentifier identifier, in PropertyList newProperties);

    /**
     * \brief Realiza uma busca por ofertas através de uma lista de facetas.
     *
     *   Serão selecionadas as ofertas de serviços que implementam todas as 
     *   facetas descritas em facets.
     *
     * \param facets As facetas da busca.
     *
     * \return As ofertas encontradas.
     */
    ServiceOfferList find (in FacetList facets);

    /**
     * \brief Realiza uma busca por ofertas através de uma lista de facetas e 
     *   critérios.
     * 
     *   Serão selecionadas as ofertas de serviços que implementam todas as 
     *   facetas descritas em facets, e, que satisfaçam aos critérios 
     *   especificados.
     *
     * \param facets As facetas da busca.
     * \param criteria Os critérios da busca.
     *
     * \return As ofertas encontradas.
     */
    ServiceOfferList findByCriteria (in FacetList facets, in PropertyList criteria);
};

/*----------------------------- Interface ------------------------------*/

/** \brief Identificador de interface. */
typedef string InterfaceIdentifier;

/** \brief Seqüência de indetificadores de interface. */
typedef sequence<InterfaceIdentifier> InterfaceIdentifierList;

/** \brief */
exception InterfaceIdentifierInUse {};

/** \brief */
exception InterfaceIdentifierNotFound {};

/** \brief */
exception InterfaceIdentifierNonExistent {};

/** \brief */
exception InterfaceIdentifierAlreadyExists {};

/*---------------------------- Autorização -----------------------------*/

/** \brief Autorização para uma implantação de sistema. */
struct SystemDeploymentAuthorization {
  string deploymentId; /**< Identificador da implantação */
  string systemId;     /**< Identificador do sistema */
  InterfaceIdentifierList authorized; /**< Interfaces autorizadas */
};

/** \brief Seqüência de autorizações. */
typedef sequence<SystemDeploymentAuthorization> SystemDeploymentAuthorizationList;

/** \brief Autorização não existe */
exception AuthorizationNonExistent {};

/** \brief */
exception SystemDeploymentNonExistent {};


/**
 * \brief Interface de gerenciamento de autorizações de serviços.
 *
 */
interface IManagement {

  /*--------------------------- Interface ------------------------------*/

  /**
   * \brief Cadastra um identificador de interface aceito
   *   pelo Serviço de Registro.
   *
   * \param ifaceId Identificador de interface.
   * \exception InterfaceIdentifierAlreadyExists Identificador já cadastrado.
   */
  void addInterfaceIdentifier(in InterfaceIdentifier ifaceId)
    raises (InterfaceIdentifierAlreadyExists);

  /**
   * \brief Remove o identificador.
   *
   * \param ifaceId Identificador de interface.
   *
   * \exception InterfaceIdentifierNonExistent Identificador não cadastrado.
   * \exception InterfaceIdentifierInUse Identificador é referenciado por
   *   algum elemento do sistema.
   */
  void removeInterfaceIdentifier(in InterfaceIdentifier ifaceId)
    raises (InterfaceIdentifierInUse, InterfaceIdentifierNonExistent);

  /**
   * \brief Recupera todos os identificadores de interface cadastrados.
   *
   * \return Seqüência de identificadores de interface.
   */
  InterfaceIdentifierList getInterfaceIdentifiers();

  /*-------------------------- Autorização -----------------------------*/

  /**
   * \brief Autoriza a implantação  a exportar a interface.  O Serviço
   *   de  Acesso é consultado  para verificar  se a  implantação está
   *   cadastrada.
   *
   * \param deploymentId Identificador da implantação.
   * \param ifaceId Identificador da interface.
   *
   * \exception SystemDeploymentNonExistent Implantação não cadastrada.
   * \exception InterfaceIdentifierNonExistent Insterface não cadastrada.
   */
  void grant(in string deploymentId, in InterfaceIdentifier ifaceId)
    raises (SystemDeploymentNonExistent, InterfaceIdentifierNonExistent);

  /**
   * \brief Revoga a autorização para exportar a interface.
   *
   * \param deploymentId Identificador da implantação.
   * \param ifaceId Identificador da interface.
   *
   * \exception AuthorizationNonExistent Implantação não possui autorização.
   * \exception InterfaceIdentifierNonExistent Insterface não cadastrada.
   */
  void revoke(in string deploymentId, in InterfaceIdentifier ifaceId)
    raises (AuthorizationNonExistent, InterfaceIdentifierNonExistent);

  /**
   * \brief Remove a autorização da implantação.
   *
   * \param deploymentId Identificador da implantação.
   * \exception AuthorizationNonExistent Implantação não possui autorização.
   */
  void removeAuthorization(in string deploymentId)
    raises (AuthorizationNonExistent);

  /**
   * \brief Recupera a autorização de uma implantação.
   *
   * \param deploymentId Identificador da implantação.
   *
   * \return Autorização da implantação.
   * \exception AuthorizationNonExistent Implantação não possui autorização.
   */
  SystemDeploymentAuthorization getAuthorization(in string deploymentId)
    raises (AuthorizationNonExistent);

  /**
   * \brief Recupera todas as autorizações cadastradas.
   *
   * \return Seqüência de autorizações.
   */
  SystemDeploymentAuthorizationList getAuthorizations();

  /**
   * \brief Recupera as autorizações das implantações de um dado sistema.
   *
   * \param systemId Identificador do sistema.
   *
   * \return Seqüência de autorizações.
   */
  SystemDeploymentAuthorizationList getAuthorizationsBySystemId(
     in string systemId);

  /**
   * \brief Recupera as autorizações que contêm \e todas as interfaces
   *  fornecidas em seu conjunto de interfaces autorizadas.
   *
   * \param systemId Identificador do sistema.
   *
   * \return Seqüência de autorizações.
   */
  SystemDeploymentAuthorizationList getAuthorizationsByInterfaceId(
    in InterfaceIdentifierList ifaceIds);
};

};

};

#endif
